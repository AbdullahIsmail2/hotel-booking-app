React Context


React Context is a powerful feature in React that allows you:

--> to have global state and share data across components without having to pass down props manually through every level of your component tree



Its very useful for managing global data that many components need to access, such as user authenitcation status, theme setting etc





// Creating Context

import React from 'react'
const MyContext = React.createContext()

OR you can import the 'createContext' function directly from 'react':

import {createContext} from 'react'
const MyContext = createContext()


// Defining A Type For Context And Creating Context With Created Types(for TS)

--> first, define the type for the context value
--> Example: if you context contains a user object and a method to update the user, you can define a type like:

interface MyContextType {
  user: User | null,
  setUser: (user: User | null) => void
}

--> Secondly, you create the context with the default value matching this type.
---> if you dont have an initial default value, you can use undefined as the default value 

const MyContext = createContext<MyContextType | undefined>(undefined)





// Context Provider

--> A Context Provider in React is a component that supplies context values to its child components

--> when u create a context using React.createContext(), it returns an object with a very important property -> Provider
--> .Provider is only available on the conext that you define, e.g if you created a context called UserContext, you provider is accessed by <UserContext.Provider></UserContext.Provider>

--> .Provider also takes in a value prop. 
--> the value prop is used to define what will be accessible to any child components

/ What can be passed to 'value'
--> the value prop can take any data type: e.g:
-> primitive values (e.g strings, booleans, numbers)
-> objects - for more complex data structures
-> functions - for actions or handlers that should be shared
-> arrays - for lists or collections of items

- Example

export const MyContextProvider = ({children}, {children : React.ReactNode}) => {
  const [user, setUser] = useState(undefined)
  return (
    <MyContext.Provider value={{user, setUser}}>
      {children}
    </MyContext.Provider>
  )
}




//// Custom Hook to Access Context 

--> Instead of doing useContext in every file we can create a reusable function that will allow us to access the hook each time


- Example

export const useAppContext = () => {
	const context = useContext(AppContext)
	return context as AppContext
}

--> the 'as' here is a TS assertion, mean what we are returning is of type AppContext
